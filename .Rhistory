# importando dados, tendo strings vazias como NA e string como fatores.
dados = read.csv('Churn.csv', sep=";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados)
# importando dados, tendo strings vazias como NA e string como fatores.
dados = read.csv('Churn.csv', sep=";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados) # trás um resumo dos dados
# dando nome para as colunas
colnames(dados) = c("Id", "Score", "Estado", "Genero", "Idade", "Patrimonio","Saldo", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu")
head(dados)
View(dados)
# explorando dados, colunas categóricas
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados")
# explorando dados, colunas categóricas
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados") # tabela dos estados, passando o título e o nome do eixo x
counts = table(dados$Genero)
barplot(counts, main="Genero", xlab = "Generos")
# explorando colunas numéricas
summary(dados$Score)
boxplot(dados$Score)
hist(dados%Score)
hist(dados$Score)
# explorando colunas numéricas
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
boxplot(dados$Salario)
boxplot(dados$Salario, outline = F)
summary(dados$Salario)
boxplot(dados$Salario)
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario, outline = F)
```{r}
help(outline = F)
help("boxplot")
# encontrando valores incompletos (NA)
dados[!complete.cases(dados),] # o ! serve como negação, o lado esquerdo da vírgula é para as linhas e o direito é para as colunas
summary(dados$Salario)
median(dados$Salario, na.rm = T) # aqui se encontra a mediana, como existem valores (na) é preciso usar o na.rm como True, ou se não a função irá retornar (na) também.
summary(dados$Salario)
median(dados$Salario, na.rm = T) # aqui se encontra a mediana, como existem valores (na) é preciso usar o na.rm como True, ou se não a função irá retornar (na) também.
dados[is.na(dados$Salario),]$Salario = median(dados$Salario, na.rm = T) # fazendo um teste lógico para encontrar os campos vazios e já substituir pela mediana.
summary(dados$Salario)
median(dados$Salario, na.rm = T) # aqui se encontra a mediana, como existem valores (na) é preciso usar o na.rm como True, ou se não a função irá retornar (na) também.
dados[is.na(dados$Salario),]$Salario = median(dados$Salario, na.rm = T) # fazendo um teste lógico para encontrar os campos vazios e já substituir pela mediana.
dados[!complete.cases(dados$Salario),]
dados[is.na(dados$Salario),]$Salario = median(dados$Salario, na.rm = T) # fazendo um teste lógico para encontrar os campos vazios e já substituir pela mediana.
dados[!complete.cases(dados$Salario),]
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
summary(dados$Genero)
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
summary(dados$Genero)
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[dados$Genero == "F" | dados$Genero == "Fem"]$Genero = "Feminino"
summary(dados$Genero)
# como dá para ver o termos ficaram zerados ao invés de serem retirados, e agora podemos retirar eles.
dados$Genero = factor(dados$Genero)
summary(dados$Genero)
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
summary(dados$Genero)
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[dados$Genero == "F" | dados$Genero == "Fem"]$Genero = "Feminino"
dados[is.na(dados$Genero) | ,dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[dados$Genero == "F" | dados$Genero == "Fem"]$Genero = "Feminino"
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"
dados[is.na(dados$Genero) | dados$Genero == "M"]$Genero = "Masculino"
dados[is.na(dados$Genero) | dados$Genero == "M" ,]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[dados$Genero == "F" | dados$Genero == "Fem" ,]$Genero = "Feminino"
summary(dados$Genero)
# como dá para ver o termos ficaram zerados ao invés de serem retirados, e agora podemos retirar eles.
dados$Genero = factor(dados$Genero)
# como dá para ver o termos ficaram zerados ao invés de serem retirados, e agora podemos retirar eles.
dados$Genero = factor(dados$Genero)
summary(dados$Genero)
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
summary(dados$Genero)
dados[is.na(dados$Genero) | dados$Genero == "M" ,]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
# mudando idades fora do dominio
summary(dados$Idade)
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade # visualisando valores fora do dominio
dados[is.na(dados$Idade),] # verificando se existem idades com valor na
median(dados$Idade) # calculando mediana
dados[dados$Idade<0 | dados$Idade>110,]$Idade = median(dados$Idade)
dados[dados$Idade<0 | dados$Idade>110,]$Idade
summary(dados$Idade)
# importando dados, tendo strings vazias como NA e string como fatores.
dados = read.csv('Churn.csv', sep=";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados) # trás um resumo dos dados
# dando nome para as colunas
colnames(dados) = c("Id", "Score", "Estado", "Genero", "Idade", "Patrimonio","Saldo", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu")
head(dados)
# explorando dados, colunas categóricas
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados") # tabela dos estados, passando o título e o nome do eixo x
counts = table(dados$Genero)
barplot(counts, main="Genero", xlab = "Generos") # tabela dos generos
# explorando colunas numéricas
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
# importando dados, tendo strings vazias como NA e string como fatores.
dados = read.csv('Churn.csv', sep=";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados) # trás um resumo dos dados
# dando nome para as colunas
colnames(dados) = c("Id", "Score", "Estado", "Genero", "Idade", "Patrimonio","Saldo", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu")
head(dados)
# explorando dados, colunas categóricas
counts = table(dados$Estado)
barplot(counts, main="Estados", xlab="Estados") # tabela dos estados, passando o título e o nome do eixo x
counts = table(dados$Genero)
barplot(counts, main="Genero", xlab = "Generos") # tabela dos generos
# explorando colunas numéricas
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario, outline = F)
# encontrando valores incompletos (NA)
dados[!complete.cases(dados),] # o ! serve como negação, o lado esquerdo da vírgula é para as linhas e o direito é para as colunas
summary(dados$Salario)
median(dados$Salario, na.rm = T) # aqui se encontra a mediana, como existem valores (na) é preciso usar o na.rm como True, ou se não a função irá retornar (na) também.
dados[is.na(dados$Salario),]$Salario = median(dados$Salario, na.rm = T) # fazendo um teste lógico para encontrar os campos vazios e já substituir pela mediana.
dados[!complete.cases(dados$Salario),]
# padrinização de gêneros
unique(dados$Genero) # retorna os valores que podem ter no gênero
summary(dados$Genero)
dados[is.na(dados$Genero) | dados$Genero == "M" ,]$Genero = "Masculino"  # aqui estamos trocando os valores vazios e os valores que estão com M, tudo para Masculino
dados[dados$Genero == "F" | dados$Genero == "Fem" ,]$Genero = "Feminino"
summary(dados$Genero)
# como dá para ver o termos ficaram zerados ao invés de serem retirados, e agora podemos retirar eles.
dados$Genero = factor(dados$Genero)
summary(dados$Genero)
# mudando idades fora do dominio
summary(dados$Idade)
dados[dados$Idade<0 | dados$Idade>110 ,]$Idade # visualisando valores fora do dominio
dados[is.na(dados$Idade),] # verificando se existem idades com valor na
median(dados$Idade) # calculando mediana
dados[dados$Idade<0 | dados$Idade>110,]$Idade = median(dados$Idade)
dados[dados$Idade<0 | dados$Idade>110,]$Idade
summary(dados$Idade)
# buscando dados duplicados
x = dados[duplicated(dados$Id),]
x
dados
dados[duplicated(dados$Id)]
dados[dados$Id == x$id,]
# buscando dados duplicados
x = dados[duplicated(dados$Id),]
x
dados = dados[-c(82), ] # apagando o dado repetido
x = dados[duplicated(dados$Id),] # verificando se existe outro dado repetido
x
# dados fora do dominio
unique(dados$Estado)
summary(dados$Estado)
# dados fora do dominio
unique(dados$Estado)
summary(dados$Estado)
dados[!dados$Estado %in% c("RS", "SC", "PR"),]$Estado = "RS" # atribuindo a moda para os dados que estão fora do domínio
summary(dados$Estado)
dados%Estado = factor(dados$Estado)
dados$Estado = factor(dados$Estado)
summary(dados$Estado)
# calculando outliers
desv = sd(dados$Salario, na.rm = T)
dados[dados$Salario >=2 *desv ,]$Salario
# outra maneira de ver é usando gráficos
boxplot(dados$Salario)
boxplot(dados$Salario, outline = F)
x
boxplot(dados$Salario, outline = T) # aqui podemos ver ele sem mostrar os desvios
x = boxplot(dados$Salario)$out
x
boxplot(dados$Salario, outline = F) # aqui podemos ver ele sem mostrar os desvios, caso o outline seja V
x = boxplot(dados$Salario)$out # caso a linha de cima não tenha retirado o desvio padrão, aqui daria para visualizar os valores do desvio padrao
x
dados[dados$Salario >=2 *desv ,]$Salario = median(dados$Salario) # aqui foi realizada a troca dos valores pela mediana
# atualizando esses valores para a mediana
median(dados$Salario)
dados[dados$Salario >=2 *desv ,]$Salario = median(dados$Salario) # aqui foi realizada a troca dos valores pela mediana
dados[dados$Salario >=2 *desv ,]$Salario = median(dados$Salario) # aqui foi realizada a troca dos valores pela mediana
dados[dados$Salario >=2 *desv ,]$Salario
dados = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados)
dados[!complete.cases(dados), ]
summary(dados$Umidade)
median(dados$Umidade)
median(dados$Umidade, na.rm = T)
dados[is.na(dados$Umidade),]$Umidade = median(dados$Umidade, na.rm = T)
dados[!complete.cases(dados),]
summary(dados$Vento)
summary(dados$Vento)
dados[is.na(dados$Vento),]$Vento = "FALSO"
dados[is.na(dados$Vento),]$Vento = "FALSO"
dados[is.na(dados$Vento),]$Vento = "FALSO"
summary(dados$Vento)
summary(dados$Aparencia)
dados[dados$Aparencia == "menos", ]$Aparencia = "sol"
summary(dados$Aparencia)
dados$Aparencia = factor(dados$Aparencia)
summary(dados$Aparencia)
boxplot(dados$Temperatura)
median(dados$Temperatura)
dados[dados$Temperatura <130 | dados$Temperatura < -130 ,]$Temperatura = median(dados$Temperatura)
boxplot(dados$Temperatura)
dados[dados$Temperatura <130 | dados$Temperatura < -130 ,]$Temperatura = median(dados$Temperatura)
boxplot(dados$Temperatura)
dados$Temperatura
boxplot(dados$Temperatura)
dados$Temperatura
dados = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = T)
head(dados)
summary(dados)
dados[!complete.cases(dados), ]
summary(dados$Umidade)
median(dados$Umidade, na.rm = T)
dados[is.na(dados$Umidade),]$Umidade = median(dados$Umidade, na.rm = T)
dados[!complete.cases(dados),]
summary(dados$Vento)
dados[is.na(dados$Vento),]$Vento = "FALSO"
summary(dados$Vento)
summary(dados$Aparencia)
dados[dados$Aparencia == "menos", ]$Aparencia = "sol"
summary(dados$Aparencia)
dados$Aparencia = factor(dados$Aparencia)
summary(dados$Aparencia)
boxplot(dados$Temperatura)
dados[dados$Temperatura >130 | dados$Temperatura <-130]$Temperatura = median(dados$Temperatura)
dados[dados$Temperatura >130 | dados$Temperatura < -130]$Temperatura = median(dados$Temperatura)
dados[dados$Temperatura >130 | dados$Temperatura < -130 ,]$Temperatura = median(dados$Temperatura)
boxplot(dados$Temperatura)
boxplot(dados$Umidade)
summary(dados$Umidade)
dados[dados$Umidade >  100 | dados$Umidade <0 ,]$Umidade = median(dados$Umidade)
boxplot(dados$Umidade)
sum(dados$Jogar)
summary(dados$Jogar)
#importa dados, string vazio como NA, string como fatores
dados = read.csv("Tempo.csv", sep = ";", na.strings="", stringsAsFactors=T)
#aparencia
counts = table(dados$Aparencia)
counts
barplot(counts, main="Aparencia", xlab="Aparencia")
#Gênero
counts = table(dados$Vento)
counts
barplot(counts, main="Vento", xlab="Vento")
#jogar
counts = table(dados$Jogar)
counts
barplot(counts, main="Jogar", xlab="Jogar")
#Temperatura
summary(dados$Temperatura)
boxplot(dados$Temperatura)
hist(dados$Temperatura)
# histograma
trees
hist(trees$Height)
hist(trees$Height, main = "Árvores", ylab = "Frequência", xlab = "Altura", col = "blue")
hist(trees$Height, main = "Árvores", ylab = "Frequência", xlab = "Altura", col = "blue", density = 20, breaks = 20) # deixando a densidade da cor menor e também o gráfico com mais detalhes
# usando a densidade para ver o mesmo gráfico
densidade = density(trees$Height)
plot(densidade)
# gerando o histograma junto com a densidade.
hist(trees$Height, main = NULL, xlab = NULL)
par(new=T) # define que o próximo gráfico irá sobrepor o anterior
plot(densidade)
# gerando o histograma junto com a densidade.
hist(trees$Height, main = NULL, xlab = NULL, ylab = NULL)
par(new=T) # define que o próximo gráfico irá sobrepor o anterior
plot(densidade)
# gráfico de dispersão
plot(trees$Girth, trees$Volume)
plot(trees$Girth, trees$Volume, main = "Árvores")
plot(trees$Girth, trees$Volume, main = "Árvores", ylab = "Circunferência", xlab = "Volume", col = "blue")
plot(trees$Girth, trees$Volume, main = "Árvores", ylab = "Circunferência", xlab = "Volume", col = "blue", pch = 20)
plot(trees$Girth, trees$Volume, main = "Árvores", ylab = "Circunferência", xlab = "Volume", col = "blue", pch = 20, type = "l") # aqui mudamos o tipo, passamos que será linhas
plot(jitter(trees$Girth), trees$Volume)
# adicionando leganda categórica no gráfico de dispersão
CO2
plot(CO2$conc, CO2$uptake, pch=20, col = CO2$Treatment)
# adicionando leganda categórica
CO2
plot(CO2$conc, CO2$uptake, pch=20, col = CO2$Treatment)
legend("bottomright", legend = c("nonchilleed","chilled"), cex = 1, fill = c("black", "red"))
# adicionando leganda categórica
CO2
plot(CO2$conc, CO2$uptake, pch=20, col = CO2$Treatment)
legend("bottomright", legend = c("nonchilled","chilled"), cex = 1, fill = c("black", "red")) # aqui adicionamos a legenda, o primeiro parâmetro diz a posição, o segundo é os nomes que a vai conter na legenda, o terceiro é o tamanho da legenda, e o último é a cores que os parâmetros recebem. Para saber qual parâmetro colocar é só olhar qual aparece primeiro na base de dados, como o nonchilled apareceu primeiro, aqui também temos de colocar ele primeiro
plot(trees) # aqui ele cria uma matriz de gráficos
# dividindo a tela
split.screen(figs = c(2,2)) # definindo as dimensões da tela
screen(1) # escolhendo em qual tela irei colocar
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
his(trees$Volume)
# dividindo a tela
split.screen(figs = c(2,2)) # definindo as dimensões da tela
screen(1) # escolhendo em qual tela irei colocar
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
# dividindo a tela
split.screen(figs = c(2,2)) # definindo as dimensões da tela
screen(1) # escolhendo em qual tela irei colocar
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all=T)
help("close.screen")
amostra
amostra = sample(c(0,1), 150, replace = T, prob = c(0.5,0.5))
amostra
summary(amostra)
summary(as.factor(amostra))
amostra = sample(c(0,1), 150, replace = T, prob = c(0.7,0.3)) # gerando 150 números com a opção de escolha entre 0 e 1, com mais chances para o 0
amostra
summary(as.factor(amostra))
amostra = sample(c(1:1000), 150, replace = F) # gerando 150 amostras sem repetir nenhum valor
amostra
amostra = sample(c(0,1), 150, replace = T, prob = c(0.7,0.3))
summary(as.factor(amostra))
# aqui eu irei pegar os resultados gerados aleatórios para pegar os dados de algum banco de dados
amostrairis = iris[amostra==1,]
amostrairis
dim(amostrairis)
# aqui eu irei pegar os resultados gerados aleatórios para pegar os dados de algum banco de dados
amostrairis = iris[amostra==1,]
amostrairis
dim(amostrairis)
# repetindo um experimento
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
library("TeachingSampling")
# amostra sistemática de tamanho 150, com 10 grupos
amostra = S.SY(150, 10)
amostra
amostrairis = iris[amostra,] # usando a amostra
amostrairis
install.packages("sampling")
library("sampling")
proporcao = 25
amostrairis2 = strata(data = iris, stratanames = c("Species"), size = c(rep(proporcao,3)), method = "srswor") # gerando uma amostragem do data frame iris, pegando os dados das especies, o size é para dizermos a quantidade e o 3 é quantas vezes vamos fazer isso e o método existem vários.
# srswor amostra simples sem reposição; srswr com reposição; poisson; systematic
summary(amostrairis2)
infert
summary(intert)
infert
summary(intert)
infert
infert
summary(infert)
# criando uma amostragem dos dados infert
amostra = strata(data = infert, stratanames = "education", size = c(5,48,47), method = "srswor") # gerando dados da mesma maneira que foi feito ali em cima, porém aqui passamos proporções diferentes para cada "tipo", já que eles contém mais ou menos dados.
amostra
summary(amostra)
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
# média
mean(jogadores)
# mediana
median(jogadores)
# Quartis
quantile(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
# 3°Quartil
quartis[4]
# desvio padrão
sd(jogadores)
# resumo
summary(jogadores)
options(warn = 1)
install.packages("semTools")
options(warn = 1)
library("semTools")
# criando um vetor
z = rep(0,500)
# gerando amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3)) # gerando dados enviesados
z[i] = mean(m) # gerando a média dos valores
if (i<4){
hist(m,breaks=50, main= paste0("Histograma", i)) # gerando um histograma das 3 primeiras amostragens
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
# gerando um qq plot, para verificar se a distribuição foi normal
qqnorm(x)
qqline(x)
set.seed(123)
x = rnorm(1000) # gera variáveis normalmente distribuidas
# gerando um qq plot, para verificar se a distribuição foi normal
qqnorm(x)
qqline(x)
# fazendo o teste de shapiro, que também pode ser usado para verificar se é uma distribuição normal
# fazendo o teste de shapiro, que também pode ser usado para verificar se é uma distribuição normal
shapiro.test(x)
# histograma com linha de densidade
hist(x, main="")
par(new=T)
plot(density(x), ylab = "", xlab = "", axes=F, lwd=2.5)
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
m = mvrnonnorm(1000, c(1,2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3))
qqnorm(m)
qqline(m)
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
m = mvrnonnorm(1000, c(1,2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3))
qqnorm(m)
qqline(m)
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
m = mvrnonnorm(1000, c(1,2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3))
qqnorm(m)
qqline(m)
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
m = mvrnonnorm(1000, c(1,2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3))
qqnorm(m)
qqline(m)
# exemplo caso os dados não estivem normalmente distribuidos
library("semTools")
m = mvrnonnorm(1000, c(1,2), matrix(c(10,2,2,5),2,2),
skewness = c(5,2), kurtosis = c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
hist(m, main="")
par(new(T))
hist(m, main="")
par(new=T)
plot(density(m), ylab = "", xlab = "", axes=F, lwd=2.5)
hist(m, main="")
par(new=T)
plot(density(m), ylab = "", xlab = "", axes=F)
hist(m, main="")
par(new=T)
plot(density(m), ylab = "", xlab = "", axes=F, lwd=2.5)
